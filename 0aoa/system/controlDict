/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  5.x                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     simpleFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         2000;	//1000

deltaT          1;

writeControl    runTime;

writeInterval   100;	
purgeWrite      10;	

//writeInterval   10;	
//purgeWrite      100;	

writeFormat     ascii;

writePrecision  8;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

// ************************************************************************* //

functions
{

///////////////////////////////////////////////////////////////////////////

forces_object
{
    type forces;
    functionObjectLibs ("libforces.so");

    //writeControl outputTime;
    writeControl   timeStep;
    writetInterval  1;

    enabled true;
 
    //// Patches to sample
    patches ("wall_slat" "wall_airfoil" "wall_flap");

    //// Name of fields
    pName p;
    Uname U;

    //only for incompressible flows
    rho rhoInf;
    rhoInf 1.0;

    //// Centre of rotation
    CofR (0 0 0);
}

///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////

forceCoeffs_object
{
    type forceCoeffs;
    functionObjectLibs ("libforces.so");

    enabled true;

    patches ("wall_slat" "wall_airfoil" "wall_flap");

    pName p;
    Uname U;

    //only for incompressible flows
    rho rhoInf;
    rhoInf 1.0;

    //// Dump to file
    log true;

    CofR (0.0 0 0);

    pitchAxis (0 0 1);
    magUInf 1.0;
    lRef 1;		// reference lenght for moments!!!
    Aref 1;		// reference area for force coefficient computation
			// 1.21622 with deployed high lift devices
			// approx 1 in cruise configuration (stowed high lift devices)
			// This is the projected area using a depth of 1 

    writeControl   timeStep;
    writeInterval  1;

    //0        
    liftDir     (0 1 0);			//-sin AOA, cos AOA, 0 AOA in RAD
    dragDir     (1 0 0);			// cos AOA, sin AOA, 0 AOA in RAD

    //16
    //liftDir     (-0.27563 0.96126  0);	//-sin AOA, cos AOA, 0 AOA in RAD
    //dragDir     (0.96126 0.27563 0);		// cos AOA, sin AOA, 0 AOA in RAD
}

///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////

minmaxdomain
{
    type fieldMinMax;

    functionObjectLibs ("libfieldFunctionObjects.so");

    enabled true;

    mode component;

    writeControl timeStep;
    writeInterval 1;

    log true;

    fields (p U nuTilda nut k omega);
}

///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////

yplus
{
    type yPlus;
    functionObjectLibs ("libutilityFunctionObjects.so");
    enabled true;
    log	true;
    writeControl outputTime;   
}

///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
fieldAverage1
{
    type            fieldAverage;
    libs ( "libfieldFunctionObjects.so" );
    writeControl    writeTime;
    fields
    (
        U
        {
                 mean        on;
                 prime2Mean  on;
                 base        time;
        }

        p
        {
                 mean        on;
                 prime2Mean  on;
                 base        time;
        }

        nut
        {
                 mean        on;
                 prime2Mean  on;
                 base        time;
        }
    );
}
///////////////////////////////////////////////////////////////////////////

};
